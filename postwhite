#!/usr/bin/env ruby

##
# = Postwhite Policy Server
#
# == Introduction
# Postwhite is a policy server for Postfix MTA which filters incoming emails
# based on per recipient whitelists managed by an email frontend.
#
# == Installation
# The following instructions assume that you are using the default settings.
#
# 1. Install the necessary Ruby gems:
#    <tt>gem install facets trollop</tt>
# 2. Create the user and group Postwrite should run with:
#    <tt>useradd -n -d /dev/null -s /sbin/nologin postwhite</tt>
# 3. Create the configuration and spool files:
#    <tt>postwhite configure</tt>
# 4. List all email addresses that should be protected by Postwhite in:
#    <tt>/etc/postfix/postwhite/recipients.yml</tt>
# 5. Start the Postwhite daemon:
#    <tt>postwhite -d -q start</tt>
# 6. Add the line <tt>check_policy_service inet:127.0.0.1:10035,</tt> to the
#    <tt>smtpd_recipient_restrictions</tt> block which you find somewhere in
#    <tt>/etc/postfix/main.cf</tt>. You should place it after basic reject
#    rules (like <tt>reject_unauth_destination,</tt>) yet before the greylist
#    (like Postgrey) and <tt>permit_mynetworks,</tt>.
# 7. Finally, reload Postfix to bring your changes into effect:
#    <tt>postfix reload</tt>
#
# == Usage
# Incoming emails are denied unless the sender address or sender domain is 
# present on the recipient's whitelist. This concept is neither new nor fancy
# in itself, but the way Postwhite lets you manage your whitelist sure is.
# 
# Here is a real life example:
#
# Arthur's main email address <em>arthur@dent.tld</em> is great for everyday
# use, but he doesn't want to pollute it by using it for mailing lists,
# websites, online shopping and such. Postwhite to the rescue! Arthur creates 
# a virtual email address <em>hitchhike@dent.tld</em> which is delivered to 
# the same mailbox. He adds this address to +recipients.yml+ and then
# restarts Postwhite.
#
# Initially, all incoming emails will be denied, so when Arthur decides to 
# join the Betelgeuse mailing list, his whitelist has to learn about this. 
# Arthur sends an empty email to <em>hitchhike+learn@dent.tld</em> which
# puts Postwhite into learning mode for a limited period of time. In learning
# mode, Postwhite allows and delivers <em>any</em> incoming mails, yet it
# delivers a followup notification message along with it. When the first 
# email from the Betelgeuse mailing list comes in, Arthur simply replies to 
# the corresponding notification message thus adding Betelgeuse to the 
# whitelist.
#
# As you see, Arthur sends commands to Postwhite by adding <em>+command</em>
# right before the <em>@</em> of his email address. A good starting point
# is to send an <em>info</em> command to which Postwhite replies with a list
# of available commands and a dump of your current whitelist. In Arthur's
# case he would have to send an email to <em>hitchhike+info@dent.tld</em>.
#
# == Donations
# Please show your support for free software by making a donation which
# will help keeping this project alive. This applies in particular to email
# service providers: Don't use it if you are too cheap to donate!
#
# http://www.bitcetera.com/products/postwhite
#
# == Feedback and Contributions
# Feel free to send your success/failure stories or questions using the 
# mailform on:
#
# http://www.bitcetera.com
#
# For bugs, suggestions or contributions check out the project on:
#
# http://forge.bitcetera.com
#
# == Disclaimer and License
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You find a copy of the full GPLv3 license on:
#
# http://www.gnu.org/licenses/gpl-3.0.txt
#
# :title: Postwhite Policy Server

require 'rubygems'
require 'trollop'
require 'yaml'
require 'erb'
require 'etc'
require 'gserver'
require 'net/smtp'
require 'fileutils'
require 'facets/file/read'
require 'facets/file/write'
require 'facets/file/rewrite'
require 'facets/hash/rekey'

##
# Postwhite controller.

class Postwhite

  ##
  # Postwhite version.

  VERSION = 'postwhite 0.1.0, (c) 2008 Sven Schwyn, www.bitcetera.com'

  ##
  # Available commands.

  COMMANDS = [:start, :stop, :status, :configure]

  ##
  # Default settings used as fallback and by 'configure'.

  CONFIG = {
    :'host' => 'localhost',
    :'port' => 10035,
    :'user' => 'postwhite',
    :'max-connections' => 4,
    :'learning-period' => 30,
    :'require-sasl' => true,
    :'reject-message' => 'User unknown in local recipient table',
    :'smtp-host' => 'localhost',
    :'smtp-port' => 25,
    :'sender' => 'Postwhite Service <postwhite@domain.tld>',
    :'pid-file' => '/var/run/postwhite.pid',
    :'log-file' => '/var/log/postwhite.log',
    :'spool-dir' => '/var/spool/postfix/postwhite'
  }

  ##
  # Mail messages sent by Postwhite used as fallback and by 'configure'.

  MESSAGES = {
    :footer => <<-EOS,
This is an automated message from the Postwhite service.

Check this web page for an introduction:
http://www.bitcetera.com/products/postwhite
    EOS
    :info => <<-EOS,
Subject: Info

Postwhite recognizes the following email commands:
<%= @request[:username] %>+info@<%= @request[:domain] %> --- request an informational email like this one
<%= @request[:username] %>+learn@<%= @request[:domain] %> --- temporary (<%= $config[:'learning-period'] %> min) allow all incoming emails for learning
<%= @request[:username] %>+allow-user-at-domain.tld@<%= @request[:domain] %> --- allow future emails from user@domain.tld
<%= @request[:username] %>+allow-domain.tld@<%= @request[:domain] %> --- allow future emails from all users of domain.tld
<%= @request[:username] %>+deny-user-at-domain.tld@<%= @request[:domain] %> --- deny future emails from user@domain.tld
<%= @request[:username] %>+deny-domain.tld@<%= @request[:domain] %> --- deny future emails from all users of domain.tld

Your whitelist is currently <%= @request.learning? ? 'in LEARNING MODE' : 'NOT in learning mode' %> and contains the following entries:
<%= locals[:whitelist].empty? ? :none : locals[:whitelist].join("\n") %>
    EOS
    :allow => <<-EOS,
Subject: Allow from <%= @request[:domain] %>?

The sender of the accompanying email IS NOT YET on your whitelist:
* Sender:  <%= @request[:sender] %>
* Client:  <%= @request[:client_address] %> <%= @request[:client_name] %>
* Request: <%= @request[:instance] %>

Please choose what you wish to do with future emails from this sender:
* Reply to this email if you wish to ALLOW all emails from <%= @request[:domain] %>.
* Send an email to <%= @request[:recipient].sub(/@/, '+allow-'+@request[:username]+'-at-'+@request[:domain]+'@') %> to ALLOW emails from this exact sender.
* Trash this email otherwise.
    EOS
    :deny => <<-EOS
Subject: Deny from <%= @request[:domain] %>?

The sender of the accompanying email IS ALREADY on your whitelist:
* Sender:  <%= @request[:sender] %>
* Client:  <%= @request[:client_address] %> <%= @request[:client_name] %>
* Request: <%= @request[:instance] %>

Please choose what you wish to do with future emails from this sender:
* Reply to this email if you wish to DENY all emails from <%= @request[:domain] %>.
* Trash this email otherwise.
    EOS
  }

  ##
  # Sample recipients used by 'configure'.

  RECIPIENTS = {
    'example.without.sasl@domain.tld' => nil,
    'example.with.sasl@domain.tld' => 'example-sasl-user'
  }

  ##
  # Find a running postwhite daemon or do some cleanup if none is found.

  def initialize
    options = parse_options
    CONFIG[:user] = options[:user]
    $config = CONFIG.merge(YAML.load_file("#{options[:prefix]}/#{options[:'config-dir']}/config.yml").rekey) rescue CONFIG.clone
    $config.merge!(options)
    [:'config-dir', :'pid-file', :'log-file', :'spool-dir'].each {|k| $config[k] = "#{$config[:prefix]}/#{$config[k]}".sub(/\/\//, '/') }
    $messages = MESSAGES.merge(YAML.load_file("#{$config[:'config-dir']}/messages.yml").rekey) rescue MESSAGES.clone
    $recipients = YAML.load_file("#{$config[:'config-dir']}/recipients.yml") rescue {}
  end
  
  ##
  # Dispatch to the selected command.
  
  def dispatch
    raise "must be run with root privileges" if Process.euid != 0
    raise "command argument not recognized" if $config[:command].nil? || !COMMANDS.include?($config[:command].to_sym)
    user = Etc.getpwnam($config[:user])
    $config[:uid] = user.uid
    $config[:gid] = user.gid
    File.open($config[:'pid-file']) {|file| @pid = file.gets.to_i } rescue @pid = nil
    Process.kill(0, @pid) rescue cleanup
    self.send($config[:command])
  rescue Exception => e
    puts e.message if $config[:debug] || !$config[:quiet]
    puts e.backtrace.join("\n") if $config[:debug]
    1
  end

  ##
  # Creates all the necessary files in <tt>/etc</tt> and <tt>/var</tt>.

  def configure
    [:'config-dir', :'spool-dir'].each {|k| mkdir?($config[k]) }
    %w(CONFIG RECIPIENTS MESSAGES).each {|k| mkyml?(k) }
    0
  end

  ##
  # Start the postwhite daemon.

  def start
    if !started?
      configure
      FileUtils.touch($config[:'log-file'])
      FileUtils.chmod(0640, $config[:'log-file'])
      $log = File.open($config[:'log-file'], 'a')
      @pid = fork do
        Process.egid = $config[:gid]
        Process.euid = $config[:uid]
        server = PostwhiteServer.new
        server.start
        STDERR.reopen('/dev/null')   # silence STDERR
        sleep   # until INT signal
      end || (raise "cannot not fork server process")
      File.open($config[:'pid-file'], 'w') {|file| file.puts @pid }
      puts "postwhite started on #{$config[:host]}:#{$config[:port]} with pid #{@pid}" if !$config[:quiet]
      Signal.trap('INT') { cleanup }
      if $config[:detach]
        Process.detach(@pid)
      else
        Process.wait
      end
    else
      raise "postwhite already running"
    end
    0
  end

  ##
  # Stop the postwhite daemon.

  def stop
    if started?
      Process.kill('INT', @pid)
      cleanup
      puts "postwhite daemon stopped" if !$config[:quiet]      
    else
      raise "postwhite daemon not running"
    end
    0
  end

  ##
  # Inquire the status of the postwhite daemon.

  def status
    if started?
      puts 'started' if !$config[:quiet]
      0
    else
      puts 'stopped' if !$config[:quiet]
      1
    end
  end
  
private

  ##
  # Read the options from the command line.

  def parse_options
    options = Trollop::options do
      version VERSION
      banner <<-EOS
Postwhite is a policy server for Postfix MTA which filters incoming emails
based on per recipient whitelists managed by an email frontend.

Documentation:
        http://www.bitcetera.com/products/postwhite

Usage:
        postwhite [options] {#{Postwhite::COMMANDS.join('|')}}

Options:
      EOS
      opt :'config-dir', "Directory containing the configuration files", :default => '/etc/postfix/postwhite'
      opt :'detach', "Detach the daemon", :default => false
      opt :'quiet', "Don't output anything", :default => false
      opt :'audit', "Write audit information to log", :default => false
      opt :'debug', "Write debug information to log", :default => false
      opt :'prefix', "Use this prefix for all paths", :default => '/'
      opt :'user', "Run the server as this user", :default => 'postwhite'
      stop_on Postwhite::COMMANDS
    end
    options[:command] = ARGV[0]
    options
  end

  ##
  # Returns true if a postwhite daemon is running.

  def started?
    !@pid.nil? && @pid > 0
  end

  ##
  # Reset the PID and remove the PID file.

  def cleanup
    @pid = nil
    File.delete($config[:'pid-file']) rescue true
    @log.close rescue true
  end

  ##
  # Create a directory if it doesn't exist already.

  def mkdir?(dir)
    if !File.directory?(dir)
      FileUtils.mkdir_p(dir, :mode => 0750)
      File.chown($config[:uid], $config[:gid], dir)
    end
  end

  ##
  # Create a default configuration file if it doesn't exist already.

  def mkyml?(yml)
    file = "#{$config[:'config-dir']}/#{yml.downcase}.yml"
    if !File.exists?(file)
      File.open(file, 'w') do |f|
        f.puts eval(yml).rekey(&:to_s).to_yaml
      end
      File.chmod(0640, file)
      File.chown($config[:uid], $config[:gid], file)
    end
  end

  ##
  # Postwhite server.

  class PostwhiteServer < GServer

    ##
    # Available commands.

    COMMANDS = [:info, :learn, :allow, :deny]
  
    ##
    # Initialize the server.

    def initialize
      super($config[:port], $config[:host], $config[:'max-connections'], $log, $config[:audit], $config[:debug])
    end

    private

    ##
    # Serving method called when a client connects.

    def serve(io)
      @request = Request.new(io)
      log("Request #{@request[:instance]} #{@request[:sender]}: #{@request.inspect}") if $config[:debug]
      if @request.protected?
        if @request.command?
          if @request.authorized?
            self.send(@request[:command])
            respond(io, :DISCARD, :'executing command')
          else   # not authorized
            respond(io, :REJECT, :'authorization failed')
          end
        else   # not command
          if @request.learning?
            if @request.whitelisted?
              sendmail($messages[:deny], $config[:sender], @request[:recipient], @request[:recipient].sub(/@/, "+deny-#{@request[:domain]}@"))
            else   # not whitelisted
              sendmail($messages[:allow], $config[:sender], @request[:recipient], @request[:recipient].sub(/@/, "+allow-#{@request[:domain]}@"))
            end
            respond(io, :DUNNO, :'learning mode')              
          else   # not learning
            if @request.whitelisted?
              respond(io, :DUNNO, :'found on whitelist')
            else   # not whitelisted
              respond(io, :REJECT, $config[:'reject-message'])              
            end  
          end
        end
      else   # not protected
        respond(io, :DUNNO)
      end
    rescue Exception => e
      respond(io, :DUNNO, :'daemon error')
      log(e.message + "\n" + e.backtrace.join("\n"))
    end
    
    ##
    # Send an informational message.

    def info
      whitelist = File.read_list("#{$config[:'config-dir']}/#{@request[:sender]}") rescue []
      whitelist.map! {|e| "#{e} --- delete: #{@request[:username]}+deny-#{e.sub(/@/, '-at-')}@#{@request[:domain]}" }
      sendmail($messages[:info], $config[:sender], @request[:sender], nil, :whitelist => whitelist )
    end
    
    ##
    # Temporary allow any incoming mails for learning.

    def learn
      FileUtils.touch("#{$config[:'spool-dir']}/#{@request[:sender]}")
    end
    
    ##
    # Allow future mails from a user or domain.

    def allow
      @request.add_to_whitelist
      File.delete("#{$config[:'spool-dir']}/#{@request[:sender]}") rescue true
    end

    ##
    # Deny future mails from a user or domain.

    def deny
      @request.remove_from_whitelist
      File.delete("#{$config[:'spool-dir']}/#{@request[:sender]}") rescue true
    end

    ##
    # Send a mail message through SMTP.

    def sendmail(message, from, to, replyto=nil, locals=nil)
      message = ERB.new(<<-EOS).result(binding)
From: <%= $config[:sender] %>
To: <%= to %>
Reply-To: <%= replyto.nil? ? from : replyto %>
#{message}
#{$messages[:footer]}
      EOS
      Net::SMTP.start($config[:'smtp-host'], $config[:'smtp-port']) do |smtp|
        smtp.send_message message, from, to
      end
    end

    ##
    # Sends a response through the IO channel.

    def respond(io, action=:DUNNO, message=nil)
      io.print(:'action=', action)
      io.print(:' ', message) if !message.nil?
      2.times { io.puts }
      log("Response #{@request[:instance]} #{@request[:sender]}: #{action} #{message}") if $config[:debug]
    end

  end

  ##
  # Postwhite request.

  class Request

    ##
    # Parse the request.

    def initialize(io)
      @data = { :argument => nil, :client_address => nil, :client_name => nil, :command => nil, :instance => nil, :recipient => nil, :sasl_username => nil, :sender => nil }
      while attribute = io.gets.chomp.split('=', 2)
        break if attribute.empty?
        @data[attribute[0].to_sym] = attribute[1].downcase if @data.keys.include?(attribute[0].to_sym)
      end
      if @data[:sender] =~ /^(.*?)@(.*)$/
        @data[:username] = $1
        @data[:domain] = $2        
      end
      if @data[:recipient] =~ /^(.+)\+(#{PostwhiteServer::COMMANDS.join('|')})-?(.+)?(@.+)$/
        @data[:recipient] = $1 + $4
        @data[:command] = $2
        @data[:argument] = $3
      end
      @data[:argument].sub!(/-at-/, '@') if !@data[:argument].nil?
    end

    ##
    # Read value from the request data hash.

    def [](key)
      @data[key]
    end

    ##
    # Is the email eligible for Postwhite protection?

    def protected?
      @data[:client_address] !~ /^(127\.0\.0\.1|::1)$/ &&   # exclude local emails
      $recipients.keys.include?(@data[:recipient])
    end

    ##
    # Is the request is a command message (or an ordinary incoming message)?
    
    def command?
      !@data[:command].nil?
    end

    ##
    # Is the request a command message from an authorized sender?
 
    def authorized?
      command? &&
      $recipients.keys.include?(@data[:sender]) &&   # valid sender?
      @data[:sender] == @data[:recipient] &&   # own email address?
      (!$config[:'require-sasl'] || $recipients[@data[:sender]] == @data[:'sasl_username'])   # valid sasl username?
    end

    ##
    # Is the recipient of the incoming message in learning mode?
    
    def learning?
      File.exists?("#{$config[:'spool-dir']}/#{@data[:recipient]}") &&
      Time.now - File.mtime("#{$config[:'spool-dir']}/#{@data[:recipient]}") < $config[:'learning-period'] * 60 
    end

    ##
    # Is the sender of the incoming message (or the passed regexp) on the whitelist?

    def whitelisted?(regexp=/^(#{@data[:sender]}|#{@data[:domain]})$/)
      whitelist = "#{$config[:'config-dir']}/#{@data[:recipient]}"
      FileUtils.touch(whitelist)
      FileUtils.chmod(0640, whitelist)
      !File.open(whitelist) {|f| f.grep(regexp) }.empty?
    end

    ##
    # Add an entry (sender or sender domain) to the whitelist.

    def add_to_whitelist
      if !whitelisted?(/#{@data[:argument]}/)
        File.append("#{$config[:'config-dir']}/#{@data[:recipient]}", "#{@data[:argument]}\n")
      end
    end

    ##
    # Delete an entry (sender or sender domain) from the whitelist.

    def remove_from_whitelist
      if whitelisted?(/#{@data[:argument]}/)
        File.rewrite("#{$config[:'config-dir']}/#{@data[:recipient]}") do |s|
          s.gsub!(/^#{Regexp.escape(@data[:argument])}\s*/, '')
        end
      end
    end

  end

end

##
# Main execution block.

exit Postwhite.new.dispatch
